<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-10-04 at 08:24:48.
 */
//class FormTest extends PHPUnit_Framework_TestCase {
class FormTest extends N8_Controller {

	/**
	 * @var Form
	 */
	protected $form;

	/**
	 * only use index for CI unit testing. phpUnit doesn't rely on index()
	 */
	public function index() {
//		parent::loadUnitTest();
		$this->load->library('unit_test');
		$this->form = new Form();

		//run the tests
		$this->testAddField();
		$this->testGetNewField();
		$this->testSetAutocomplete();
		$this->testSetEnctype();
		$this->testSetMethod();
		$this->testSetName();
		$this->testSetNovalidate();
		$this->testSetTarget();
		$this->testAddHiddenInput();
		$this->testSetHiddenInputs();
		$this->testSetAction();

//		echo $this->unit->report();


		$this->unit->parseResultsArray($this->unit->result());
	}

	/**
	 * @covers Form::renderForm
	 * @todo   Implement testRenderForm().
	 */
	public function testRenderForm() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			   'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Form::addField
	 */
	public function testAddField() {
		$field = Form::getNewField(Form_Field::FIELD_TYPE_BUTTON);
		$this->form->addField($field);

		$this->unit->assertCount(1, $this->form->getFields(), __FUNCTION__);
	}

	/**
	 * @covers Form::getNewField
	 * @todo   Implement testGetNewField().
	 */
	public function testGetNewField() {
		$field = Form::getNewField(Form_Field::FIELD_TYPE_BUTTON);

		$this->unit->assertClassName('Form_Field_Input_Button', $field, __FUNCTION__ . '::Form_Field_Input_Button');
	}

	/**
	 * @covers Form::setAutocomplete
	 * @todo   Implement testSetAutocomplete().
	 */
	public function testSetAutocomplete() {
		$this->form->setAutocomplete('on');
		$attributes = $this->form->getAttributes();

		$this->unit->assertEquals('on', $attributes['autocomplete'], __FUNCTION__ . '::on');

		$this->form->setAutocomplete('off');
		$attributes = $this->form->getAttributes();

		$this->unit->assertEquals('off', $attributes['autocomplete'], __FUNCTION__ . '::off');

		$this->form->setAutocomplete(true);
		$attributes = $this->form->getAttributes();

		$this->unit->assertEquals('on', $attributes['autocomplete'], __FUNCTION__ . '::true');

		$this->form->setAutocomplete(false);
		$attributes = $this->form->getAttributes();

		$this->unit->assertEquals('off', $attributes['autocomplete'], __FUNCTION__ . '::false');
	}

	/**
	 * @covers Form::setEnctype
	 */
	public function testSetEnctype() {
		$this->form->setEnctype(Form::FORM_ENCTYPE_MULTIPART);
		$this->unit->assertEquals(Form::FORM_ENCTYPE_MULTIPART, $this->form->getEnctype(), __FUNCTION__ . '::FORM_ENCTYPE_MULTIPART');

		$this->form->setEnctype(Form::FORM_ENCTYPE_APPLICATION);
		$this->unit->assertEquals(Form::FORM_ENCTYPE_APPLICATION, $this->form->getEnctype(), __FUNCTION__ . '::FORM_ENCTYPE_APPLICATION');

		$this->form->setEnctype(Form::FORM_ENCTYPE_PLAIN);
		$this->unit->assertEquals(Form::FORM_ENCTYPE_PLAIN, $this->form->getEnctype(), __FUNCTION__ . '::FORM_ENCTYPE_PLAIN');

		$exception_args = array('bob');
		$this->unit->assertException('UnexpectedValueException', $this->form, 'setEnctype', $exception_args, __FUNCTION__ . '::UnexpectedValueException_Test');
	}

	/**
	 * @covers Form::setMethod
	 */
	public function testSetMethod() {
		$this->form->setMethod('post');

		$attributes = $this->form->getAttributes();
		$this->unit->assertEquals('post', $attributes['method'], __FUNCTION__ . '::post');

		$this->form->setMethod('GET');

		$attributes = $this->form->getAttributes();
		$this->unit->assertEquals('get', $attributes['method'], __FUNCTION__ . '::GET');
	}

	/**
	 * @covers Form::setName
	 */
	public function testSetName() {
		$this->form->setName('bobs_form');

		$attributes = $this->form->getAttributes();
		$this->unit->assertEquals('bobs_form', $attributes['name'], __FUNCTION__);
	}

	/**
	 * @covers Form::setNovalidate
	 */
	public function testSetNovalidate() {
		$this->form->setNovalidate('novalidate');

		$attributes = $this->form->getAttributes();
		$this->unit->assertEquals(true, $attributes['novalidate'], __FUNCTION__ . '::novalidate');

		$this->form->setNovalidate(0);

		$attributes = $this->form->getAttributes();
		$this->unit->assertEquals(null, $attributes['novalidate'], __FUNCTION__ . '::0');
	}

	/**
	 * @covers Form::setTarget
	 */
	public function testSetTarget() {
		$this->form->setTarget(Form::FORM_TARGET_BLANK);

		$attributes = $this->form->getAttributes();
		$this->unit->assertEquals(Form::FORM_TARGET_BLANK, $attributes['target'], __FUNCTION__ . '::FORM_TARGET_BLANK');

		$this->form->setTarget(Form::FORM_TARGET_PARENT);

		$attributes = $this->form->getAttributes();
		$this->unit->assertEquals(Form::FORM_TARGET_PARENT, $attributes['target'], __FUNCTION__ . '::FORM_TARGET_PARENT');

		$this->form->setTarget(Form::FORM_TARGET_SELF);

		$attributes = $this->form->getAttributes();
		$this->unit->assertEquals(Form::FORM_TARGET_SELF, $attributes['target'], __FUNCTION__ . '::FORM_TARGET_SELF');

		$this->form->setTarget(Form::FORM_TARGET_TOP);

		$attributes = $this->form->getAttributes();
		$this->unit->assertEquals(Form::FORM_TARGET_TOP, $attributes['target'], __FUNCTION__ . '::FORM_TARGET_TOP');

		$exception_args = array('bob');
		$this->unit->assertException('UnexpectedValueException', $this->form, 'setTarget', $exception_args, __FUNCTION__ . '::UnexpectedValueException_Test');
	}

	/**
	 * @covers Form::addHiddenInput
	 */
	public function testAddHiddenInput() {
		$this->form->addHiddenInput('bob', 'smith');

		$this->unit->assertCount(1, $this->form->getHiddenInputs(), __FUNCTION__);
	}

	/**
	 * @covers Form::setHiddenInputs
	 */
	public function testSetHiddenInputs() {
		$this->form->setHiddenInputs(array('sally' => 'jones', 'billy' => 'smith'));

		$this->unit->assertCount(2, $this->form->getHiddenInputs(), __FUNCTION__);
	}

	/**
	 * @covers Form::setAction
	 */
	public function testSetAction() {
		$this->form->setAction('event/action');

		$this->unit->assertEquals('event/action', $this->form->getAction(), __FUNCTION__);
	}

}
